/*jshint esversion: 6 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Scheduler {
    constructor() {
        this.Client = require('node-rest-client').Client;
        this.client = new this.Client();
        this.scheduler_host = process.env.SCHEDULER_HOST || 'localhost';
        this.status = {
            message: 'not updated yet',
            statusCode: 500
        };
        this.info = {};
        this.humanTasks = [];
    }
    start_updates(interval) {
        this.update_status(interval);
        this.update_info(interval);
        this.update_human_tasks(interval);
    }
    update_human_tasks(interval) {
        const req = this.client.get('http://' + this.scheduler_host + ':3210/tasks/human', (data, response) => {
            if (response.statusCode === 200) {
                this.humanTasks = data;
            }
            if (interval > 0) {
                setTimeout(() => this.update_human_tasks(interval), interval);
            }
        });
        req.on('error', (error) => {
            if (interval > 0) {
                setTimeout(() => this.update_human_tasks(interval), interval);
            }
        });
    }
    update_status(interval) {
        const req = this.client.get('http://' + this.scheduler_host + ':3210/status', (data, response) => {
            this.status.statusCode = response.statusCode;
            this.status.message = response.statusMessage;
            setTimeout(() => this.update_status(interval), interval);
        });
        req.on('error', (error) => {
            this.status.statusCode = 500;
            this.status.message = error.code;
            setTimeout(() => this.update_status(interval), interval);
        });
    }
    update_info(interval) {
        const req = this.client.get('http://' + this.scheduler_host + ':3210/info', (data, response) => {
            if (response.statusCode === 200) {
                this.info = data;
                setTimeout(() => this.update_info(interval), interval);
            }
            else {
                setTimeout(() => this.update_info(interval), interval);
            }
        });
        req.on('error', (error) => {
            setTimeout(() => this.update_info(interval), interval);
        });
    }
    set_policy(body, cb) {
        console.log(body);
        const req = this.client.post('http://' + this.scheduler_host + ':3210/policy/' + body.policy, (data, response) => {
            if (response.statusCode === 200) {
                cb(null, data);
            }
            else {
                cb('Error: ' + data, null);
            }
        });
        req.on('error', (error) => {
            cb('error: ' + error, null);
        });
    }
    set_amount(body, cb) {
        console.log(body);
        const req = this.client.post('http://' + this.scheduler_host + ':3210/amount/' + body.policy + '/' + body.amount, (data, response) => {
            if (response.statusCode === 200) {
                cb(null, data);
            }
            else {
                cb('Error: ' + data, null);
            }
        });
        req.on('error', (error) => {
            cb('error: ' + error, null);
        });
    }
    execute(body, cb) {
        console.log(body);
        const args = {
            data: body,
            headers: { 'Content-Type': 'application/json' }
        };
        const req = this.client.post('http://' + this.scheduler_host + ':3210/execute/', args, (data, response) => {
            if (response.statusCode === 200) {
                cb(null, data);
            }
            else {
                cb('Error: ' + data, null);
            }
        });
        req.on('error', (error) => {
            cb('error: ' + error, null);
        });
    }
    set_human_task(body, cb) {
        console.log(body);
        let url = '';
        if (body.status === 'busy') {
            url = 'http://' + this.scheduler_host + ':3210/task/' + body.workflowId + '/' + body.taskId + '/busy';
        }
        else {
            url = 'http://' + this.scheduler_host + ':3210/task/' + body.workflowId + '/' + body.taskId;
        }
        const req = this.client.post(url, (data, response) => {
            if (response.statusCode === 200) {
                this.update_human_tasks(0);
                cb(null, data);
            }
            else {
                cb('Error: ' + data, null);
            }
        });
        req.on('error', (error) => {
            cb('error: ' + error, null);
        });
    }
    check_status() {
        return this.status;
    }
    ;
    get_info() {
        return this.info;
    }
    get_human_tasks() {
        return this.humanTasks;
    }
}
exports.Scheduler = Scheduler;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
