/*jshint esversion: 6 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Docker {
    constructor() {
        this.Client = require('node-rest-client').Client;
        this.client = new this.Client();
        this.docker_host = process.env.DOCKER_HOST || 'localhost';
        this.status = { message: 'not updated yet', statusCode: 500 };
        this.info = {};
        this.containers = [];
        this.services = [];
        this.nodes = [];
        this.workers = ['abc'];
        this.get_nodes = function () {
            return this.nodes;
        };
        this.get_workers = function () {
            return this.workers;
        };
        this.set_node_availability = function (hostname, availability, cb) {
            const req = this.client.post('http://' + this.docker_host + ':4444/node/' + hostname + '/' + availability, (data, response) => {
                if (response.statusCode === 200) {
                    cb(null, data);
                }
                else {
                    cb('Error: ' + data, null);
                }
            });
            req.on('error', (error) => {
                cb('error: ' + error, null);
            });
        };
        this.delete_workers = function (_, cb) {
            const req = this.client.delete('http://' + this.docker_host + ':4444/services/workers', (data, response) => {
                if (response.statusCode === 200) {
                    cb(null, data);
                }
                else {
                    cb('Error: ' + data, null);
                }
            });
            req.on('error', (error) => {
                cb('error: ' + error, null);
            });
        };
        this.create_workers = function (_, cb) {
            const req = this.client.post('http://' + this.docker_host + ':4444/services/workers', (data, response) => {
                if (response.statusCode === 200) {
                    cb(null, data);
                }
                else {
                    cb('Error: ' + data, null);
                }
            });
            req.on('error', (error) => {
                cb('error: ' + error, null);
            });
        };
    }
    start_updates(interval) {
        this.update_status(interval);
        this.update_info(interval);
        this.update_containers(interval);
        this.update_services(interval);
        this.update_nodes(interval);
        this.update_workers(interval);
    }
    ;
    update_status(interval) {
        const req = this.client.get('http://' + this.docker_host + ':4444/status', (data, response) => {
            this.status.statusCode = response.statusCode;
            this.status.message = response.statusMessage;
            setTimeout(() => this.update_status(interval), interval);
        });
        req.on('error', (error) => {
            this.status.statusCode = 500;
            this.status.message = error.code;
            setTimeout(() => this.update_status(interval), interval);
        });
    }
    ;
    update_info(interval) {
        const req = this.client.get('http://' + this.docker_host + ':4444/info/remote', (data, response) => {
            this.info = data;
            setTimeout(() => this.update_info(interval), interval);
        });
        req.on('error', (error) => {
            setTimeout(() => this.update_info(interval), interval);
        });
    }
    ;
    update_containers(interval) {
        const req = this.client.get('http://' + this.docker_host + ':4444/containers/remote', (data, response) => {
            this.containers = data;
            setTimeout(() => this.update_containers(interval), interval);
        });
        req.on('error', (error) => {
            setTimeout(() => this.update_containers(interval), interval);
        });
    }
    ;
    update_services(interval) {
        const req = this.client.get('http://' + this.docker_host + ':4444/services', (data, response) => {
            this.services = data;
            setTimeout(() => this.update_services(interval), interval);
        });
        req.on('error', (error) => {
            setTimeout(() => this.update_services(interval), interval);
        });
    }
    ;
    update_nodes(interval) {
        const req = this.client.get('http://' + this.docker_host + ':4444/nodes', (data, response) => {
            this.nodes = data;
            setTimeout(() => this.update_nodes(interval), interval);
        });
        req.on('error', (error) => {
            setTimeout(() => this.update_nodes(interval), interval);
        });
    }
    ;
    update_workers(interval) {
        const req = this.client.get('http://' + this.docker_host + ':4444/workers', (data, response) => {
            this.workers = data;
            setTimeout(() => this.update_workers(interval), interval);
        });
        req.on('error', (error) => {
            setTimeout(() => this.update_workers(interval), interval);
        });
    }
    ;
    check_status() {
        return this.status;
    }
    ;
    get_remote_info() {
        return this.info;
    }
    ;
    get_remote_containers() {
        return this.containers;
    }
    ;
    get_remote_services() {
        return this.services;
    }
    ;
}
exports.Docker = Docker;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
