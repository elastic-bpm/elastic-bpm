/*jshint esversion: 6 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Human {
    constructor() {
        this.Client = require('node-rest-client').Client;
        this.client = new this.Client();
        this.component = {};
        this.human_host = process.env.HUMAN_HOST || 'localhost';
        this.status = {
            message: 'not updated yet',
            statusCode: 500
        };
        this.info = {};
    }
    start_updates(interval) {
        this.update_status(interval);
        this.update_info(interval);
    }
    ;
    update_info(interval) {
        const req = this.client.get('http://' + this.human_host + ':5555/info', (data, response) => {
            this.info = data;
            setTimeout(() => this.update_info(interval), interval);
        });
        req.on('error', (error) => {
            this.status.statusCode = 500;
            this.status.message = error.code;
            setTimeout(() => this.update_info(interval), interval);
        });
    }
    ;
    update_status(interval) {
        const req = this.client.get('http://' + this.human_host + ':5555/status', (data, response) => {
            this.status.statusCode = response.statusCode;
            this.status.message = response.statusMessage;
            setTimeout(() => this.update_status(interval), interval);
        });
        req.on('error', (error) => {
            this.status.statusCode = 500;
            this.status.message = error.code;
            setTimeout(() => this.update_status(interval), interval);
        });
    }
    ;
    check_status() {
        return this.status;
    }
    ;
    get_info() {
        return this.info;
    }
    ;
    start_humans(body, cb) {
        const args = {
            data: body,
            headers: { 'Content-Type': 'application/json' }
        };
        const req = this.client.post('http://' + this.human_host + ':5555/start', args, (data, response) => {
            cb(null, data);
        });
        req.on('error', (error) => {
            cb(error, null);
        });
    }
    stop_humans(body, cb) {
        const req = this.client.post('http://' + this.human_host + ':5555/stop', (data, response) => {
            cb(null, data);
        });
        req.on('error', (error) => {
            cb(error, null);
        });
    }
}
exports.Human = Human;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21wb25lbnRzL2h1bWFuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdCQUF3Qjs7O0FBRXhCO0lBQUE7UUFDSSxXQUFNLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUMsTUFBTSxDQUFDO1FBQzVDLFdBQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUMzQixjQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ2YsZUFBVSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxJQUFJLFdBQVcsQ0FBQztRQUNuRCxXQUFNLEdBQUc7WUFDTCxPQUFPLEVBQUUsaUJBQWlCO1lBQzFCLFVBQVUsRUFBRSxHQUFHO1NBQ2xCLENBQUM7UUFDRixTQUFJLEdBQVEsRUFBRSxDQUFDO0lBeUVuQixDQUFDO0lBdkVHLGFBQWEsQ0FBQyxRQUFhO1FBQ3ZCLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBQUEsQ0FBQztJQUVGLFdBQVcsQ0FBQyxRQUFhO1FBQ3JCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsVUFBVSxHQUFHLFlBQVksRUFDbEUsQ0FBQyxJQUFTLEVBQUUsUUFBYTtZQUNyQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztZQUNqQixVQUFVLENBQUMsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzNELENBQUMsQ0FBQyxDQUFDO1FBRVAsR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFVO1lBQ3ZCLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQztZQUM3QixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO1lBRWpDLFVBQVUsQ0FBQyxNQUFNLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDM0QsQ0FBQyxDQUFDLENBQUM7SUFFUCxDQUFDO0lBQUEsQ0FBQztJQUVGLGFBQWEsQ0FBQyxRQUFhO1FBQ3ZCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsVUFBVSxHQUFHLGNBQWMsRUFDcEUsQ0FBQyxJQUFTLEVBQUUsUUFBYTtZQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDO1lBQzdDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUM7WUFFN0MsVUFBVSxDQUFDLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUM3RCxDQUFDLENBQUMsQ0FBQztRQUVQLEdBQUcsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBVTtZQUN2QixJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUM7WUFDN0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztZQUVqQyxVQUFVLENBQUMsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzdELENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUFBLENBQUM7SUFFRixZQUFZO1FBQ1IsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDdkIsQ0FBQztJQUFBLENBQUM7SUFFRixRQUFRO1FBQ0osTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDckIsQ0FBQztJQUFBLENBQUM7SUFFRixZQUFZLENBQUMsSUFBUyxFQUFFLEVBQU87UUFDM0IsTUFBTSxJQUFJLEdBQUc7WUFDVCxJQUFJLEVBQUUsSUFBSTtZQUNWLE9BQU8sRUFBRSxFQUFFLGNBQWMsRUFBRSxrQkFBa0IsRUFBRTtTQUNsRCxDQUFDO1FBQ0YsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxVQUFVLEdBQUcsYUFBYSxFQUFFLElBQUksRUFDMUUsQ0FBQyxJQUFTLEVBQUUsUUFBYTtZQUNyQixFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ25CLENBQUMsQ0FBQyxDQUFDO1FBRVAsR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFVO1lBQ3ZCLEVBQUUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsV0FBVyxDQUFDLElBQVMsRUFBRSxFQUFPO1FBQzFCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsVUFBVSxHQUFHLFlBQVksRUFDbkUsQ0FBQyxJQUFTLEVBQUUsUUFBYTtZQUNyQixFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ25CLENBQUMsQ0FBQyxDQUFDO1FBRVAsR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFVO1lBQ3ZCLEVBQUUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0o7QUFsRkQsc0JBa0ZDIiwiZmlsZSI6InNyYy9jb21wb25lbnRzL2h1bWFuLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypqc2hpbnQgZXN2ZXJzaW9uOiA2ICovXHJcblxyXG5leHBvcnQgY2xhc3MgSHVtYW4ge1xyXG4gICAgQ2xpZW50ID0gcmVxdWlyZSgnbm9kZS1yZXN0LWNsaWVudCcpLkNsaWVudDtcclxuICAgIGNsaWVudCA9IG5ldyB0aGlzLkNsaWVudCgpO1xyXG4gICAgY29tcG9uZW50ID0ge307XHJcbiAgICBodW1hbl9ob3N0ID0gcHJvY2Vzcy5lbnYuSFVNQU5fSE9TVCB8fCAnbG9jYWxob3N0JztcclxuICAgIHN0YXR1cyA9IHtcclxuICAgICAgICBtZXNzYWdlOiAnbm90IHVwZGF0ZWQgeWV0JyxcclxuICAgICAgICBzdGF0dXNDb2RlOiA1MDBcclxuICAgIH07XHJcbiAgICBpbmZvOiBhbnkgPSB7fTtcclxuXHJcbiAgICBzdGFydF91cGRhdGVzKGludGVydmFsOiBhbnkpIHtcclxuICAgICAgICB0aGlzLnVwZGF0ZV9zdGF0dXMoaW50ZXJ2YWwpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlX2luZm8oaW50ZXJ2YWwpO1xyXG4gICAgfTtcclxuXHJcbiAgICB1cGRhdGVfaW5mbyhpbnRlcnZhbDogYW55KSB7XHJcbiAgICAgICAgY29uc3QgcmVxID0gdGhpcy5jbGllbnQuZ2V0KCdodHRwOi8vJyArIHRoaXMuaHVtYW5faG9zdCArICc6NTU1NS9pbmZvJyxcclxuICAgICAgICAgICAgKGRhdGE6IGFueSwgcmVzcG9uc2U6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbmZvID0gZGF0YTtcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy51cGRhdGVfaW5mbyhpbnRlcnZhbCksIGludGVydmFsKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJlcS5vbignZXJyb3InLCAoZXJyb3I6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXR1cy5zdGF0dXNDb2RlID0gNTAwO1xyXG4gICAgICAgICAgICB0aGlzLnN0YXR1cy5tZXNzYWdlID0gZXJyb3IuY29kZTtcclxuXHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy51cGRhdGVfaW5mbyhpbnRlcnZhbCksIGludGVydmFsKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIHVwZGF0ZV9zdGF0dXMoaW50ZXJ2YWw6IGFueSkge1xyXG4gICAgICAgIGNvbnN0IHJlcSA9IHRoaXMuY2xpZW50LmdldCgnaHR0cDovLycgKyB0aGlzLmh1bWFuX2hvc3QgKyAnOjU1NTUvc3RhdHVzJyxcclxuICAgICAgICAgICAgKGRhdGE6IGFueSwgcmVzcG9uc2U6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0dXMuc3RhdHVzQ29kZSA9IHJlc3BvbnNlLnN0YXR1c0NvZGU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXR1cy5tZXNzYWdlID0gcmVzcG9uc2Uuc3RhdHVzTWVzc2FnZTtcclxuXHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMudXBkYXRlX3N0YXR1cyhpbnRlcnZhbCksIGludGVydmFsKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJlcS5vbignZXJyb3InLCAoZXJyb3I6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXR1cy5zdGF0dXNDb2RlID0gNTAwO1xyXG4gICAgICAgICAgICB0aGlzLnN0YXR1cy5tZXNzYWdlID0gZXJyb3IuY29kZTtcclxuXHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy51cGRhdGVfc3RhdHVzKGludGVydmFsKSwgaW50ZXJ2YWwpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBjaGVja19zdGF0dXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdHVzO1xyXG4gICAgfTtcclxuXHJcbiAgICBnZXRfaW5mbygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pbmZvO1xyXG4gICAgfTtcclxuXHJcbiAgICBzdGFydF9odW1hbnMoYm9keTogYW55LCBjYjogYW55KSB7XHJcbiAgICAgICAgY29uc3QgYXJncyA9IHtcclxuICAgICAgICAgICAgZGF0YTogYm9keSxcclxuICAgICAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IHJlcSA9IHRoaXMuY2xpZW50LnBvc3QoJ2h0dHA6Ly8nICsgdGhpcy5odW1hbl9ob3N0ICsgJzo1NTU1L3N0YXJ0JywgYXJncyxcclxuICAgICAgICAgICAgKGRhdGE6IGFueSwgcmVzcG9uc2U6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY2IobnVsbCwgZGF0YSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXEub24oJ2Vycm9yJywgKGVycm9yOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgY2IoZXJyb3IsIG51bGwpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHN0b3BfaHVtYW5zKGJvZHk6IGFueSwgY2I6IGFueSkge1xyXG4gICAgICAgIGNvbnN0IHJlcSA9IHRoaXMuY2xpZW50LnBvc3QoJ2h0dHA6Ly8nICsgdGhpcy5odW1hbl9ob3N0ICsgJzo1NTU1L3N0b3AnLFxyXG4gICAgICAgICAgICAoZGF0YTogYW55LCByZXNwb25zZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjYihudWxsLCBkYXRhKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJlcS5vbignZXJyb3InLCAoZXJyb3I6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBjYihlcnJvciwgbnVsbCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl19
