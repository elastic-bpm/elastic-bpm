"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const elasticsearch = require("elasticsearch");
const rx_elasticsearch_1 = require("rx-elasticsearch");
class Elastic {
    constructor() {
        this.elastic_host = process.env.ELASTIC_HOST || '137.116.195.67';
        this.client = new elasticsearch.Client({
            host: this.elastic_host + ':9200',
            log: 'info'
        });
        this.startTime = new Date().getTime(); // NOW
        this.component = {};
        this.messages = [];
        this.rawLoad = [];
        this.maxLoadLength = 10;
        this.status = {
            message: 'not updated yet',
            statusCode: 500
        };
        this.machineLoad = {};
    }
    start_updates(interval) {
        this.update_status(interval);
        this.update_messages(interval);
        this.update_load(interval);
    }
    update_load(interval) {
        let from = this.startTime;
        if (this.rawLoad.length > 0) {
            from = new Date(this.rawLoad[0]['@timestamp']).getTime();
        }
        const query = {
            index: 'metricbeat-*',
            scroll: '30s',
            body: {
                query: {
                    bool: {
                        must: [
                            {
                                query_string: {
                                    analyze_wildcard: true,
                                    query: '*'
                                }
                            },
                            {
                                match: {
                                    'metricset.name': {
                                        query: 'load',
                                        type: 'phrase'
                                    }
                                }
                            },
                            {
                                range: {
                                    '@timestamp': {
                                        gt: from,
                                        format: 'epoch_millis'
                                    }
                                }
                            }
                        ],
                        must_not: new Array()
                    }
                }
            }
        };
        const rxClient = new rx_elasticsearch_1.default(this.client);
        rxClient
            .scroll(query)
            .subscribe((response) => {
            const newLoad = [];
            response.hits.hits.forEach((hit) => {
                newLoad.push(hit._source);
                newLoad.sort(function (a, b) {
                    if (a['@timestamp'] < b['@timestamp']) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                });
                newLoad.forEach((load) => {
                    if (Object.keys(this.machineLoad).indexOf(load.beat.hostname) !== -1) {
                        this.machineLoad[load.beat.hostname].load1.push(load.system.load['1']);
                        if (this.machineLoad[load.beat.hostname].load1.length > this.maxLoadLength) {
                            this.machineLoad[load.beat.hostname].load1 = this.machineLoad[load.beat.hostname].load1.slice(1);
                        }
                        this.machineLoad[load.beat.hostname].load5.push(load.system.load['5']);
                        if (this.machineLoad[load.beat.hostname].load5.length > this.maxLoadLength) {
                            this.machineLoad[load.beat.hostname].load5 = this.machineLoad[load.beat.hostname].load5.slice(1);
                        }
                        this.machineLoad[load.beat.hostname].load15.push(load.system.load['15']);
                        if (this.machineLoad[load.beat.hostname].load15.length > this.maxLoadLength) {
                            this.machineLoad[load.beat.hostname].load15 = this.machineLoad[load.beat.hostname].load15.slice(1);
                        }
                    }
                    else {
                        this.machineLoad[load.beat.hostname] = {
                            load1: [load.system.load['1']],
                            load5: [load.system.load['5']],
                            load15: [load.system.load['15']],
                        };
                    }
                });
                console.log(newLoad.length);
                if (newLoad.length > 0) {
                    this.rawLoad = newLoad;
                }
                setTimeout(() => { this.update_load(interval); }, interval);
            });
        }, (e) => console.error(e));
    }
    update_messages(interval) {
        let from = this.startTime;
        if (this.messages.length > 0) {
            from = new Date(this.messages[0]['@timestamp']).getTime();
        }
        const messagesQuery = {
            index: 'logstash-*',
            scroll: '30s',
            body: {
                query: {
                    bool: {
                        must: [{
                                query_string: {
                                    query: '*',
                                    analyze_wildcard: true
                                }
                            }, {
                                range: {
                                    '@timestamp': {
                                        gt: from,
                                        format: 'epoch_millis'
                                    }
                                }
                            }]
                    }
                }
            }
        };
        const rxClient = new rx_elasticsearch_1.default(this.client);
        rxClient
            .scroll(messagesQuery)
            .subscribe((response) => {
            const newMessages = [];
            response.hits.hits.forEach((hit) => {
                newMessages.push(hit._source);
            });
            newMessages.sort((a, b) => {
                if (a['@timestamp'] < b['@timestamp']) {
                    return 1;
                }
                else {
                    return -1;
                }
            });
            this.messages = newMessages.concat(this.messages);
            this.messages = this.messages.slice(0, 100);
            setTimeout(() => { this.update_messages(interval); }, interval);
        }, (e) => console.error(e));
    }
    update_status(interval) {
        this.client.ping({
            // ping usually has a 3000ms timeout
            requestTimeout: 1000
        }, (error) => {
            if (error) {
                this.status = {
                    message: 'ELK Down',
                    statusCode: 400
                };
                setTimeout(() => this.update_status(interval), interval);
            }
            else {
                this.status = {
                    message: 'OK',
                    statusCode: 200
                };
                setTimeout(() => this.update_status(interval), interval);
            }
        });
    }
    check_status() {
        return this.status;
    }
    get_messages() {
        return this.messages;
    }
    get_load() {
        return this.machineLoad;
    }
}
exports.Elastic = Elastic;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
