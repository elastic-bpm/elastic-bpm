/*jshint esversion: 6 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Scaling {
    constructor() {
        this.Client = require('node-rest-client').Client;
        this.client = new this.Client();
        this.scaling_host = process.env.SCALING_HOST || 'localhost';
        this.component = {};
        this.status = {
            message: 'not updated yet',
            statusCode: 500
        };
        this.virtualmachines = [];
    }
    start_updates(interval) {
        this.update_status(interval);
        this.update_virtualmachines(10 * interval);
    }
    update_status(interval) {
        const req = this.client.get('http://' + this.scaling_host + ':8888/status', (data, response) => {
            this.status.statusCode = response.statusCode;
            this.status.message = response.statusMessage;
            setTimeout(() => this.update_status(interval), interval);
        });
        req.on('error', (error) => {
            this.status.statusCode = 500;
            this.status.message = error.code;
            setTimeout(() => this.update_status(interval), interval);
        });
    }
    update_virtualmachines(interval) {
        const req = this.client.get('http://' + this.scaling_host + ':8888/virtualmachines', (data, response) => {
            this.virtualmachines = data;
            setTimeout(() => this.update_virtualmachines(interval), interval);
        });
        req.on('error', (error) => {
            console.log(error);
            this.status.statusCode = 500;
            this.status.message = error.code;
            setTimeout(() => this.update_virtualmachines(interval), interval);
        });
    }
    check_status() {
        return this.status;
    }
    ;
    get_virtualmachines() {
        return this.virtualmachines;
    }
    ;
    start_virtualmachine(resourcegroup, machine_id, cb) {
        const req = this.client.post('http://' + this.scaling_host + ':8888/virtualmachines/' + resourcegroup + '/' + machine_id, (data, response) => {
            if (response.statusCode === 200) {
                cb(null, data);
            }
            else {
                cb('Error: ' + data, null);
            }
        });
        req.on('error', (error) => {
            cb('error: ' + error, null);
        });
    }
    ;
    stop_virtualmachine(resourcegroup, machine_id, cb) {
        const req = this.client.delete('http://' + this.scaling_host + ':8888/virtualmachines/' + resourcegroup + '/' + machine_id, (data, response) => {
            if (response.statusCode === 200) {
                cb(null, data);
            }
            else {
                cb('Error: ' + data, null);
            }
        });
        req.on('error', (error) => {
            cb('error: ' + error, null);
        });
    }
    ;
}
exports.Scaling = Scaling;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
