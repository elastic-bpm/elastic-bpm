/*jshint esversion: 6 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Scheduler {
    constructor() {
        this.Client = require('node-rest-client').Client;
        this.client = new this.Client();
        this.scheduler_host = process.env.SCHEDULER_HOST || 'localhost';
        this.status = {
            message: 'not updated yet',
            statusCode: 500
        };
        this.info = {};
        this.humanTasks = [];
    }
    start_updates(interval) {
        this.update_status(interval);
        this.update_info(interval);
        this.update_human_tasks(interval);
    }
    update_human_tasks(interval) {
        const req = this.client.get('http://' + this.scheduler_host + ':3210/tasks/human', (data, response) => {
            if (response.statusCode === 200) {
                this.humanTasks = data;
            }
            if (interval > 0) {
                setTimeout(() => this.update_human_tasks(interval), interval);
            }
        });
        req.on('error', (error) => {
            if (interval > 0) {
                setTimeout(() => this.update_human_tasks(interval), interval);
            }
        });
    }
    update_status(interval) {
        const req = this.client.get('http://' + this.scheduler_host + ':3210/status', (data, response) => {
            this.status.statusCode = response.statusCode;
            this.status.message = response.statusMessage;
            setTimeout(() => this.update_status(interval), interval);
        });
        req.on('error', (error) => {
            this.status.statusCode = 500;
            this.status.message = error.code;
            setTimeout(() => this.update_status(interval), interval);
        });
    }
    update_info(interval) {
        const req = this.client.get('http://' + this.scheduler_host + ':3210/info', (data, response) => {
            if (response.statusCode === 200) {
                this.info = data;
                setTimeout(() => this.update_info(interval), interval);
            }
            else {
                setTimeout(() => this.update_info(interval), interval);
            }
        });
        req.on('error', (error) => {
            setTimeout(() => this.update_info(interval), interval);
        });
    }
    set_policy(body, cb) {
        console.log(body);
        const req = this.client.post('http://' + this.scheduler_host + ':3210/policy/' + body.policy, (data, response) => {
            if (response.statusCode === 200) {
                cb(null, data);
            }
            else {
                cb('Error: ' + data, null);
            }
        });
        req.on('error', (error) => {
            cb('error: ' + error, null);
        });
    }
    set_amount(body, cb) {
        console.log(body);
        const req = this.client.post('http://' + this.scheduler_host + ':3210/amount/' + body.policy + '/' + body.amount, (data, response) => {
            if (response.statusCode === 200) {
                cb(null, data);
            }
            else {
                cb('Error: ' + data, null);
            }
        });
        req.on('error', (error) => {
            cb('error: ' + error, null);
        });
    }
    execute(body, cb) {
        console.log(body);
        const args = {
            data: body,
            headers: { 'Content-Type': 'application/json' }
        };
        const req = this.client.post('http://' + this.scheduler_host + ':3210/execute/', args, (data, response) => {
            if (response.statusCode === 200) {
                cb(null, data);
            }
            else {
                cb('Error: ' + data, null);
            }
        });
        req.on('error', (error) => {
            cb('error: ' + error, null);
        });
    }
    set_human_task(body, cb) {
        console.log(body);
        let url = '';
        if (body.status === 'busy') {
            url = 'http://' + this.scheduler_host + ':3210/task/' + body.workflowId + '/' + body.taskId + '/busy';
        }
        else {
            url = 'http://' + this.scheduler_host + ':3210/task/' + body.workflowId + '/' + body.taskId;
        }
        const req = this.client.post(url, (data, response) => {
            if (response.statusCode === 200) {
                this.update_human_tasks(0);
                cb(null, data);
            }
            else {
                cb('Error: ' + data, null);
            }
        });
        req.on('error', (error) => {
            cb('error: ' + error, null);
        });
    }
    check_status() {
        return this.status;
    }
    ;
    get_info() {
        return this.info;
    }
    get_human_tasks() {
        return this.humanTasks;
    }
}
exports.Scheduler = Scheduler;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21wb25lbnRzL3NjaGVkdWxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3QkFBd0I7OztBQUV4QjtJQUFBO1FBQ0ksV0FBTSxHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUM1QyxXQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDM0IsbUJBQWMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsSUFBSSxXQUFXLENBQUM7UUFDM0QsV0FBTSxHQUFHO1lBQ0wsT0FBTyxFQUFFLGlCQUFpQjtZQUMxQixVQUFVLEVBQUUsR0FBRztTQUNsQixDQUFDO1FBQ0YsU0FBSSxHQUFRLEVBQUUsQ0FBQztRQUNmLGVBQVUsR0FBVSxFQUFFLENBQUM7SUErSTNCLENBQUM7SUE3SUcsYUFBYSxDQUFDLFFBQWdCO1FBQzFCLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMzQixJQUFJLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVELGtCQUFrQixDQUFDLFFBQWdCO1FBQy9CLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsY0FBYyxHQUFHLG1CQUFtQixFQUFFLENBQUMsSUFBUyxFQUFFLFFBQWE7WUFDeEcsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUM5QixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztZQUMzQixDQUFDO1lBQ0QsRUFBRSxDQUFDLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2YsVUFBVSxDQUFDLE1BQU0sSUFBSSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxF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LENBQUM7UUFFRCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFTLEVBQUUsUUFBYTtZQUN2RCxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsVUFBVSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQzlCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDM0IsRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNuQixDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ0osRUFBRSxDQUFDLFNBQVMsR0FBRyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDL0IsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgsR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFVO1lBQ3ZCLEVBQUUsQ0FBQyxTQUFTLEdBQUcsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2hDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELFlBQVk7UUFDUixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBQUEsQ0FBQztJQUVGLFFBQVE7UUFDSixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztJQUNyQixDQUFDO0lBRUQsZUFBZTtRQUNYLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQzNCLENBQUM7Q0FDSjtBQXhKRCw4QkF3SkMiLCJmaWxlIjoiY29tcG9uZW50cy9zY2hlZHVsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKmpzaGludCBlc3ZlcnNpb246IDYgKi9cclxuXHJcbmV4cG9ydCBjbGFzcyBTY2hlZHVsZXIge1xyXG4gICAgQ2xpZW50ID0gcmVxdWlyZSgnbm9kZS1yZXN0LWNsaWVudCcpLkNsaWVudDtcclxuICAgIGNsaWVudCA9IG5ldyB0aGlzLkNsaWVudCgpO1xyXG4gICAgc2NoZWR1bGVyX2hvc3QgPSBwcm9jZXNzLmVudi5TQ0hFRFVMRVJfSE9TVCB8fCAnbG9jYWxob3N0JztcclxuICAgIHN0YXR1cyA9IHtcclxuICAgICAgICBtZXNzYWdlOiAnbm90IHVwZGF0ZWQgeWV0JyxcclxuICAgICAgICBzdGF0dXNDb2RlOiA1MDBcclxuICAgIH07XHJcbiAgICBpbmZvOiBhbnkgPSB7fTtcclxuICAgIGh1bWFuVGFza3M6IGFueVtdID0gW107XHJcblxyXG4gICAgc3RhcnRfdXBkYXRlcyhpbnRlcnZhbDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVfc3RhdHVzKGludGVydmFsKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZV9pbmZvKGludGVydmFsKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZV9odW1hbl90YXNrcyhpbnRlcnZhbCk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlX2h1bWFuX3Rhc2tzKGludGVydmFsOiBudW1iZXIpIHtcclxuICAgICAgICBjb25zdCByZXEgPSB0aGlzLmNsaWVudC5nZXQoJ2h0dHA6Ly8nICsgdGhpcy5zY2hlZHVsZXJfaG9zdCArICc6MzIxMC90YXNrcy9odW1hbicsIChkYXRhOiBhbnksIHJlc3BvbnNlOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5odW1hblRhc2tzID0gZGF0YTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaW50ZXJ2YWwgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMudXBkYXRlX2h1bWFuX3Rhc2tzKGludGVydmFsKSwgaW50ZXJ2YWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJlcS5vbignZXJyb3InLCAoZXJyb3I6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoaW50ZXJ2YWwgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMudXBkYXRlX2h1bWFuX3Rhc2tzKGludGVydmFsKSwgaW50ZXJ2YWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlX3N0YXR1cyhpbnRlcnZhbDogbnVtYmVyKSB7XHJcbiAgICAgICAgY29uc3QgcmVxID0gdGhpcy5jbGllbnQuZ2V0KCdodHRwOi8vJyArIHRoaXMuc2NoZWR1bGVyX2hvc3QgKyAnOjMyMTAvc3RhdHVzJyxcclxuICAgICAgICAgICAgKGRhdGE6IGFueSwgcmVzcG9uc2U6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXR1cy5zdGF0dXNDb2RlID0gcmVzcG9uc2Uuc3RhdHVzQ29kZTtcclxuICAgICAgICAgICAgdGhpcy5zdGF0dXMubWVzc2FnZSA9IHJlc3BvbnNlLnN0YXR1c01lc3NhZ2U7XHJcblxyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMudXBkYXRlX3N0YXR1cyhpbnRlcnZhbCksIGludGVydmFsKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmVxLm9uKCdlcnJvcicsIChlcnJvcjogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzLnN0YXR1c0NvZGUgPSA1MDA7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzLm1lc3NhZ2UgPSBlcnJvci5jb2RlO1xyXG5cclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnVwZGF0ZV9zdGF0dXMoaW50ZXJ2YWwpLCBpbnRlcnZhbCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlX2luZm8oaW50ZXJ2YWw6IG51bWJlcikge1xyXG4gICAgICAgIGNvbnN0IHJlcSA9IHRoaXMuY2xpZW50LmdldCgnaHR0cDovLycgKyB0aGlzLnNjaGVkdWxlcl9ob3N0ICsgJzozMjEwL2luZm8nLCAoZGF0YTogYW55LCByZXNwb25zZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXNDb2RlID09PSAyMDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5mbyA9IGRhdGE7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMudXBkYXRlX2luZm8oaW50ZXJ2YWwpLCBpbnRlcnZhbCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMudXBkYXRlX2luZm8oaW50ZXJ2YWwpLCBpbnRlcnZhbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmVxLm9uKCdlcnJvcicsIChlcnJvcjogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy51cGRhdGVfaW5mbyhpbnRlcnZhbCksIGludGVydmFsKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRfcG9saWN5KGJvZHk6IGFueSwgY2I6IGFueSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGJvZHkpO1xyXG4gICAgICAgIGNvbnN0IHJlcSA9IHRoaXMuY2xpZW50LnBvc3QoJ2h0dHA6Ly8nICsgdGhpcy5zY2hlZHVsZXJfaG9zdCArICc6MzIxMC9wb2xpY3kvJyArIGJvZHkucG9saWN5LFxyXG4gICAgICAgICAgICAoZGF0YTogYW55LCByZXNwb25zZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXNDb2RlID09PSAyMDApIHtcclxuICAgICAgICAgICAgICAgIGNiKG51bGwsIGRhdGEpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY2IoJ0Vycm9yOiAnICsgZGF0YSwgbnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmVxLm9uKCdlcnJvcicsIChlcnJvcjogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGNiKCdlcnJvcjogJyArIGVycm9yLCBudWxsKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRfYW1vdW50KGJvZHk6IGFueSwgY2I6IGFueSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGJvZHkpO1xyXG4gICAgICAgIGNvbnN0IHJlcSA9IHRoaXMuY2xpZW50LnBvc3QoJ2h0dHA6Ly8nICsgdGhpcy5zY2hlZHVsZXJfaG9zdCArICc6MzIxMC9hbW91bnQvJyArIGJvZHkucG9saWN5ICsgJy8nICsgYm9keS5hbW91bnQsXHJcbiAgICAgICAgICAgIChkYXRhOiBhbnksIHJlc3BvbnNlOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgY2IobnVsbCwgZGF0YSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjYignRXJyb3I6ICcgKyBkYXRhLCBudWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXEub24oJ2Vycm9yJywgKGVycm9yOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgY2IoJ2Vycm9yOiAnICsgZXJyb3IsIG51bGwpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGV4ZWN1dGUoYm9keTogYW55LCBjYjogYW55KSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coYm9keSk7XHJcbiAgICAgICAgY29uc3QgYXJncyA9IHtcclxuICAgICAgICAgICAgZGF0YTogYm9keSxcclxuICAgICAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IHJlcSA9IHRoaXMuY2xpZW50LnBvc3QoJ2h0dHA6Ly8nICsgdGhpcy5zY2hlZHVsZXJfaG9zdCArICc6MzIxMC9leGVjdXRlLycsIGFyZ3MsXHJcbiAgICAgICAgKGRhdGE6IGFueSwgcmVzcG9uc2U6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzQ29kZSA9PT0gMjAwKSB7XHJcbiAgICAgICAgICAgICAgICBjYihudWxsLCBkYXRhKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNiKCdFcnJvcjogJyArIGRhdGEsIG51bGwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJlcS5vbignZXJyb3InLCAoZXJyb3I6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBjYignZXJyb3I6ICcgKyBlcnJvciwgbnVsbCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0X2h1bWFuX3Rhc2soYm9keTogYW55LCBjYjogYW55KSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coYm9keSk7XHJcbiAgICAgICAgbGV0IHVybCA9ICcnO1xyXG4gICAgICAgIGlmIChib2R5LnN0YXR1cyA9PT0gJ2J1c3knKSB7XHJcbiAgICAgICAgICAgIHVybCA9ICdodHRwOi8vJyArIHRoaXMuc2NoZWR1bGVyX2hvc3QgKyAnOjMyMTAvdGFzay8nICsgYm9keS53b3JrZmxvd0lkICsgJy8nICsgYm9keS50YXNrSWQgKyAnL2J1c3knO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHVybCA9ICdodHRwOi8vJyArIHRoaXMuc2NoZWR1bGVyX2hvc3QgKyAnOjMyMTAvdGFzay8nICsgYm9keS53b3JrZmxvd0lkICsgJy8nICsgYm9keS50YXNrSWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCByZXEgPSB0aGlzLmNsaWVudC5wb3N0KHVybCwgKGRhdGE6IGFueSwgcmVzcG9uc2U6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzQ29kZSA9PT0gMjAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZV9odW1hbl90YXNrcygwKTtcclxuICAgICAgICAgICAgICAgIGNiKG51bGwsIGRhdGEpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY2IoJ0Vycm9yOiAnICsgZGF0YSwgbnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmVxLm9uKCdlcnJvcicsIChlcnJvcjogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGNiKCdlcnJvcjogJyArIGVycm9yLCBudWxsKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjaGVja19zdGF0dXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdHVzO1xyXG4gICAgfTtcclxuXHJcbiAgICBnZXRfaW5mbygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pbmZvO1xyXG4gICAgfVxyXG5cclxuICAgIGdldF9odW1hbl90YXNrcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5odW1hblRhc2tzO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==
