/*jshint esversion: 6 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Workflow {
    constructor() {
        this.Client = require('node-rest-client').Client;
        this.multiparty = require('multiparty');
        this.fs = require('fs');
        this.client = new this.Client();
        this.workflow_host = process.env.API_HOST || 'localhost';
        this.status = {
            message: 'not updated yet',
            statusCode: 500
        };
        this.workflows = [];
    }
    start_updates(interval) {
        this.update_status(interval);
        this.update_workflows(interval);
    }
    update_status(interval) {
        const req = this.client.get('http://' + this.workflow_host + ':3000/status', (data, response) => {
            this.status.statusCode = response.statusCode;
            this.status.message = response.statusMessage;
            setTimeout(() => this.update_status(interval), interval);
        });
        req.on('error', (error) => {
            this.status.statusCode = 500;
            this.status.message = error.code;
            setTimeout(() => this.update_status(interval), interval);
        });
    }
    update_workflows(interval) {
        const req = this.client.get('http://' + this.workflow_host + ':3000/workflows', (data, response) => {
            this.workflows = data;
            setTimeout(() => this.update_workflows(interval), interval);
        });
        req.on('error', (error) => {
            this.status.statusCode = 500;
            this.status.message = error.code;
            setTimeout(() => this.update_workflows(interval), interval);
        });
    }
    create_workflow(body) {
        const args = {
            data: body,
            headers: { 'Content-Type': 'application/json' }
        };
        return new Promise((resolve, reject) => {
            const req = this.client.post('http://' + this.workflow_host + ':3000/workflows', args, (data, response) => {
                resolve(data);
            });
            req.on('error', (error) => {
                reject(error);
            });
        });
    }
    ;
    delete_workflow(workflowId, cb) {
        const req = this.client.delete('http://' + this.workflow_host + ':3000/workflows/' + workflowId, (data, response) => {
            cb(null, data);
        });
        req.on('error', (error) => {
            cb(error, null);
        });
    }
    delete_all_workflows(body, cb) {
        const req = this.client.delete('http://' + this.workflow_host + ':3000/workflows', (data, response) => {
            cb(null, data);
        });
        req.on('error', (error) => {
            cb(error, null);
        });
    }
    get_workflows_from_file(req, cb) {
        const form = new this.multiparty.Form();
        form.parse(req, (err, fields, files) => {
            if (err) {
                cb(err, null);
            }
            else if (files === undefined || files.workflow === undefined) {
                cb('Error creating workflow, file not found.', null);
            }
            else {
                let workflowsFromFile = {};
                try {
                    workflowsFromFile = JSON.parse(this.fs.readFileSync(files.workflow[0].path, 'utf8'));
                    this.fs.unlink(files.workflow[0].path, (unlink_err) => {
                        if (unlink_err) {
                            cb(unlink_err, null);
                        }
                        else {
                            cb(null, workflowsFromFile);
                        }
                    });
                }
                catch (e) {
                    cb(e, null);
                }
            }
        });
    }
    ;
    create_workflows_from_file(req, cb) {
        this.get_workflows_from_file(req, (error, workflows) => {
            if (error) {
                cb(error, null);
            }
            else {
                if (workflows.length === 0) {
                    cb('No workflows to create!', null);
                }
                const args = {
                    data: workflows,
                    headers: { 'Content-Type': 'application/json' }
                };
                const req2 = this.client.post('http://' + this.workflow_host + ':3000/workflows/multiple', args, (data, response) => {
                    if (response.statusCode === 200) {
                        cb(null, data);
                    }
                });
                req2.on('error', (err) => {
                    cb('' + err, null);
                });
            }
        });
    }
    check_status() {
        return this.status;
    }
    ;
    get_workflows() {
        return this.workflows;
    }
    ;
}
exports.Workflow = Workflow;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
