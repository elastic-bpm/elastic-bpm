/*jshint esversion: 6 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Human {
    constructor() {
        this.Client = require('node-rest-client').Client;
        this.client = new this.Client();
        this.component = {};
        this.human_host = process.env.HUMAN_HOST || 'localhost';
        this.status = {
            message: 'not updated yet',
            statusCode: 500
        };
        this.info = {};
    }
    start_updates(interval) {
        this.update_status(interval);
        this.update_info(interval);
    }
    ;
    update_info(interval) {
        const req = this.client.get('http://' + this.human_host + ':5555/info', (data, response) => {
            this.info = data;
            setTimeout(() => this.update_info(interval), interval);
        });
        req.on('error', (error) => {
            this.status.statusCode = 500;
            this.status.message = error.code;
            setTimeout(() => this.update_info(interval), interval);
        });
    }
    ;
    update_status(interval) {
        const req = this.client.get('http://' + this.human_host + ':5555/status', (data, response) => {
            this.status.statusCode = response.statusCode;
            this.status.message = response.statusMessage;
            setTimeout(() => this.update_status(interval), interval);
        });
        req.on('error', (error) => {
            this.status.statusCode = 500;
            this.status.message = error.code;
            setTimeout(() => this.update_status(interval), interval);
        });
    }
    ;
    check_status() {
        return this.status;
    }
    ;
    get_info() {
        return this.info;
    }
    ;
    start_humans(body, cb) {
        const args = {
            data: body,
            headers: { 'Content-Type': 'application/json' }
        };
        const req = this.client.post('http://' + this.human_host + ':5555/start', args, (data, response) => {
            cb(null, data);
        });
        req.on('error', (error) => {
            cb(error, null);
        });
    }
    stop_humans(body, cb) {
        const req = this.client.post('http://' + this.human_host + ':5555/stop', (data, response) => {
            cb(null, data);
        });
        req.on('error', (error) => {
            cb(error, null);
        });
    }
}
exports.Human = Human;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21wb25lbnRzL2h1bWFuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdCQUF3Qjs7O0FBRXhCO0lBQUE7UUFDSSxXQUFNLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUMsTUFBTSxDQUFDO1FBQzVDLFdBQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUMzQixjQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ2YsZUFBVSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxJQUFJLFdBQVcsQ0FBQztRQUNuRCxXQUFNLEdBQUc7WUFDTCxPQUFPLEVBQUUsaUJBQWlCO1lBQzFCLFVBQVUsRUFBRSxHQUFHO1NBQ2xCLENBQUM7UUFDRixTQUFJLEdBQVEsRUFBRSxDQUFDO0lBeUVuQixDQUFDO0lBdkVHLGFBQWEsQ0FBQyxRQUFhO1FBQ3ZCLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBQUEsQ0FBQztJQUVGLFdBQVcsQ0FBQyxRQUFhO1FBQ3JCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsVUFBVSxHQUFHLFlBQVksRUFDbEUsQ0FBQyxJQUFTLEVBQUUsUUFBYTtZQUNyQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztZQUNqQixVQUFVLENBQUMsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzNELENBQUMsQ0FBQyxDQUFDO1FBRVAsR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFVO1lBQ3ZCLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQztZQUM3QixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO1lBRWpDLFVBQVUsQ0FBQyxNQUFNLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDM0QsQ0FBQyxDQUFDLENBQUM7SUFFUCxDQUFDO0lBQUEsQ0FBQztJQUVGLGFBQWEsQ0FBQyxRQUFhO1FBQ3ZCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsVUFBVSxHQUFHLGNBQWMsRUFDcEUsQ0FBQyxJQUFTLEVBQUUsUUFBYTtZQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDO1lBQzdDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUM7WUFFN0MsVUFBVSxDQUFDLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUM3RCxDQUFDLENBQUMsQ0FBQztRQUVQLEdBQUcsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBVTtZQUN2QixJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUM7WUFDN0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztZQUVqQyxVQUFVLENBQUMsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzdELENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUFBLENBQUM7SUFFRixZQUFZO1FBQ1IsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDdkIsQ0FBQztJQUFBLENBQUM7SUFFRixRQUFRO1FBQ0osTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDckIsQ0FBQztJQUFBLENBQUM7SUFFRixZQUFZLENBQUMsSUFBUyxFQUFFLEVBQU87UUFDM0IsTUFBTSxJQUFJLEdBQUc7WUFDVCxJQUFJLEVBQUUsSUFBSTtZQUNWLE9BQU8sRUFBRSxFQUFFLGNBQWMsRUFBRSxrQkFBa0IsRUFBRTtTQUNsRCxDQUFDO1FBQ0YsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxVQUFVLEdBQUcsYUFBYSxFQUFFLElBQUksRUFDMUUsQ0FBQyxJQUFTLEVBQUUsUUFBYTtZQUNyQixFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ25CLENBQUMsQ0FBQyxDQUFDO1FBRVAsR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFVO1lBQ3ZCLEVBQUUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsV0FBVyxDQUFDLElBQVMsRUFBRSxFQUFPO1FBQzFCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsVUFBVSxHQUFHLFlBQVksRUFDbkUsQ0FBQyxJQUFTLEVBQUUsUUFBYTtZQUNyQixFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ25CLENBQUMsQ0FBQyxDQUFDO1FBRVAsR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFVO1lBQ3ZCLEVBQUUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0o7QUFsRkQsc0JBa0ZDIiwiZmlsZSI6ImNvbXBvbmVudHMvaHVtYW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKmpzaGludCBlc3ZlcnNpb246IDYgKi9cclxuXHJcbmV4cG9ydCBjbGFzcyBIdW1hbiB7XHJcbiAgICBDbGllbnQgPSByZXF1aXJlKCdub2RlLXJlc3QtY2xpZW50JykuQ2xpZW50O1xyXG4gICAgY2xpZW50ID0gbmV3IHRoaXMuQ2xpZW50KCk7XHJcbiAgICBjb21wb25lbnQgPSB7fTtcclxuICAgIGh1bWFuX2hvc3QgPSBwcm9jZXNzLmVudi5IVU1BTl9IT1NUIHx8ICdsb2NhbGhvc3QnO1xyXG4gICAgc3RhdHVzID0ge1xyXG4gICAgICAgIG1lc3NhZ2U6ICdub3QgdXBkYXRlZCB5ZXQnLFxyXG4gICAgICAgIHN0YXR1c0NvZGU6IDUwMFxyXG4gICAgfTtcclxuICAgIGluZm86IGFueSA9IHt9O1xyXG5cclxuICAgIHN0YXJ0X3VwZGF0ZXMoaW50ZXJ2YWw6IGFueSkge1xyXG4gICAgICAgIHRoaXMudXBkYXRlX3N0YXR1cyhpbnRlcnZhbCk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVfaW5mbyhpbnRlcnZhbCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHVwZGF0ZV9pbmZvKGludGVydmFsOiBhbnkpIHtcclxuICAgICAgICBjb25zdCByZXEgPSB0aGlzLmNsaWVudC5nZXQoJ2h0dHA6Ly8nICsgdGhpcy5odW1hbl9ob3N0ICsgJzo1NTU1L2luZm8nLFxyXG4gICAgICAgICAgICAoZGF0YTogYW55LCByZXNwb25zZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluZm8gPSBkYXRhO1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnVwZGF0ZV9pbmZvKGludGVydmFsKSwgaW50ZXJ2YWwpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmVxLm9uKCdlcnJvcicsIChlcnJvcjogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzLnN0YXR1c0NvZGUgPSA1MDA7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzLm1lc3NhZ2UgPSBlcnJvci5jb2RlO1xyXG5cclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnVwZGF0ZV9pbmZvKGludGVydmFsKSwgaW50ZXJ2YWwpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgdXBkYXRlX3N0YXR1cyhpbnRlcnZhbDogYW55KSB7XHJcbiAgICAgICAgY29uc3QgcmVxID0gdGhpcy5jbGllbnQuZ2V0KCdodHRwOi8vJyArIHRoaXMuaHVtYW5faG9zdCArICc6NTU1NS9zdGF0dXMnLFxyXG4gICAgICAgICAgICAoZGF0YTogYW55LCByZXNwb25zZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXR1cy5zdGF0dXNDb2RlID0gcmVzcG9uc2Uuc3RhdHVzQ29kZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdHVzLm1lc3NhZ2UgPSByZXNwb25zZS5zdGF0dXNNZXNzYWdlO1xyXG5cclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy51cGRhdGVfc3RhdHVzKGludGVydmFsKSwgaW50ZXJ2YWwpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmVxLm9uKCdlcnJvcicsIChlcnJvcjogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzLnN0YXR1c0NvZGUgPSA1MDA7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzLm1lc3NhZ2UgPSBlcnJvci5jb2RlO1xyXG5cclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnVwZGF0ZV9zdGF0dXMoaW50ZXJ2YWwpLCBpbnRlcnZhbCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNoZWNrX3N0YXR1cygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGF0dXM7XHJcbiAgICB9O1xyXG5cclxuICAgIGdldF9pbmZvKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmluZm87XHJcbiAgICB9O1xyXG5cclxuICAgIHN0YXJ0X2h1bWFucyhib2R5OiBhbnksIGNiOiBhbnkpIHtcclxuICAgICAgICBjb25zdCBhcmdzID0ge1xyXG4gICAgICAgICAgICBkYXRhOiBib2R5LFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3QgcmVxID0gdGhpcy5jbGllbnQucG9zdCgnaHR0cDovLycgKyB0aGlzLmh1bWFuX2hvc3QgKyAnOjU1NTUvc3RhcnQnLCBhcmdzLFxyXG4gICAgICAgICAgICAoZGF0YTogYW55LCByZXNwb25zZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjYihudWxsLCBkYXRhKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJlcS5vbignZXJyb3InLCAoZXJyb3I6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBjYihlcnJvciwgbnVsbCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RvcF9odW1hbnMoYm9keTogYW55LCBjYjogYW55KSB7XHJcbiAgICAgICAgY29uc3QgcmVxID0gdGhpcy5jbGllbnQucG9zdCgnaHR0cDovLycgKyB0aGlzLmh1bWFuX2hvc3QgKyAnOjU1NTUvc3RvcCcsXHJcbiAgICAgICAgICAgIChkYXRhOiBhbnksIHJlc3BvbnNlOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgIGNiKG51bGwsIGRhdGEpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmVxLm9uKCdlcnJvcicsIChlcnJvcjogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGNiKGVycm9yLCBudWxsKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4iXX0=
